{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, take, put, delay, debounce, throttle, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          console.log('addPost saga');\n          _context2.next = 4;\n          return delay(1000);\n\n        case 4:\n          id = shortid.generate(); // const result = yield call(addPostAPI, action.data)\n\n          _context2.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 7:\n          _context2.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 11]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["/Users/honest/Downloads/개발/7. react-nodebird/prepare/front/sagas/post.js"],"names":["addComment","addPost","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","fork","call","take","put","delay","debounce","throttle","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","ADD_POST_TO_ME","shortid","addCommentAPI","data","post","postId","action","type","response","addPostAPI","console","log","id","generate","content","error"],"mappings":"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","sourcesContent":["import {all, fork, call, take, put, delay, debounce, throttle, takeLatest} from 'redux-saga/effects'\nimport axios from 'axios'\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST } from '../reducers/post'\nimport { ADD_POST_TO_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data)\n}\n\nfunction* addComment(action) {\n    try {\n      // const result = yield call(addCommentAPI, action.data);\n      yield delay(1000);\n      yield put({\n        type: ADD_COMMENT_SUCCESS,\n        data: action.data,\n      });\n    } catch (err) {\n      yield put({\n        type: ADD_COMMENT_FAILURE,\n        data: err.response.data,\n      });\n    }\n  }\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data)\n}\n\nfunction* addPost(action) {\n    try {\n        console.log('addPost saga')\n        yield delay(1000)\n        const id = shortid.generate()\n        // const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data:{\n                id,\n                content: action.data,\n            }\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: id,\n        })\n    } catch(err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err.response.data,\n        })\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST, addPost)\n}\nfunction* watchRemovePost(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ])\n}"]},"metadata":{},"sourceType":"module"}