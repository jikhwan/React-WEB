{"ast":null,"code":"import { all, fork, call, take, put, delay, debounce, throttle, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000); // const result = yield call(loginAPI, action.data)\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI)\n\n    yield put({\n      type: 'LOG_OUT_SUCCESS' // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/honest/Downloads/개발/7. react-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","call","take","put","delay","debounce","throttle","takeLatest","axios","loginAPI","post","data","logIn","action","type","err","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,GAA/B,EAAoCC,KAApC,EAA2CC,QAA3C,EAAqDC,QAArD,EAA+DC,UAA/D,QAAgF,oBAAhF;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAChB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,EAAyBC,IAAzB,CAAP;AACH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,gBADA;AAENH,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMI,GAAN,EAAW;AACT,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,gBADA;AAENH,MAAAA,IAAI,EAAEI,GAAG,CAACC,QAAJ,CAAaL;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASM,SAAT,GAAqB;AACjB,SAAOT,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUQ,MAAV,GAAmB;AACf,MAAI;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMC,GAAN,EAAW;AACT,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,iBADA;AAENH,MAAAA,IAAI,EAAEI,GAAG,CAACC,QAAJ,CAAaL;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUQ,UAAV,GAAsB;AAClB,QAAMZ,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB;AACH;;AAED,UAAUQ,WAAV,GAAuB;AACnB,QAAMb,UAAU,CAAC,iBAAD,EAAoBW,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMtB,GAAG,CAAC,CACNC,IAAI,CAACmB,UAAD,CADE,EAENnB,IAAI,CAACoB,WAAD,CAFE,CAAD,CAAT;AAKH","sourcesContent":["import {all, fork, call, take, put, delay, debounce, throttle, takeLatest} from 'redux-saga/effects'\nimport axios from 'axios'\n\nfunction loginAPI() {\n    return axios.post('/api/login', data)\n}\n\nfunction* logIn(action) {\n    try {\n        yield delay(1000)\n        // const result = yield call(loginAPI, action.data)\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data,\n        });\n    } catch(err) {\n        yield put({\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data,\n        })\n    }\n}\n\nfunction logOutAPI() {\n    return axios.post('/api/logout')\n}\n\nfunction* logOut() {\n    try {\n        yield delay(1000)\n        // const result = yield call(logOutAPI)\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            // data: result.data,\n        });\n    } catch(err) {\n        yield put({\n            type: 'LOG_OUT_FAILURE',\n            data: err.response.data,\n        })\n    }\n}\n\nfunction* watchLogIn(){\n    yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut(){\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n    ])\n\n}"]},"metadata":{},"sourceType":"module"}