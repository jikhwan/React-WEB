{"ast":null,"code":"import shortId from 'shortid';\nimport produce from '../util/produce.js';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  uploadPostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LIKE_POST_REQUEST:\n        draft.likePostsLoading = true;\n        draft.likePostsDone = false;\n        draft.likePostsError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers.push({\n            id: action.data.UserId\n          });\n\n          draft.likePostsLoading = false;\n          draft.likePostsDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostsLoading = false;\n        draft.likePostsError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostsLoading = true;\n        draft.unlikePostsDone = false;\n        draft.unlikePostsError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        });\n        post.Likers = post.Likers.filter(function (v) {\n          return v.id !== action.data.UserId;\n        });\n        draft.unlikePostsLoading = false;\n        draft.unlikePostsDone = true;\n        break;\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostsLoading = false;\n        draft.unlikePostsError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePath = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/honest/Downloads/개발/7. react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","uploadPostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","addCommentLoading","addCommentDone","addCommentError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","likePostsLoading","likePostsDone","likePostsError","post","find","v","id","PostId","Likers","push","UserId","error","unlikePostsLoading","unlikePostsDone","unlikePostsError","filter","concat","length","imagePath","unshift","removePostLoading","Comments"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\nimport produce from '../util/produce.js';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  uploadPostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LIKE_POST_REQUEST:   \n      draft.likePostsLoading = true;\n      draft.likePostsDone = false;\n      draft.likePostsError = null;\n      break;\n    case LIKE_POST_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Likers.push( { id: action.data.UserId } );\n      draft.likePostsLoading = false;\n      draft.likePostsDone = true;\n      break;\n    }\n    case LIKE_POST_FAILURE:\n      draft.likePostsLoading = false;\n      draft.likePostsError = action.error;\n      break;\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostsLoading = true;\n      draft.unlikePostsDone = false;\n      draft.unlikePostsError = null;\n      break;\n    case UNLIKE_POST_SUCCESS:\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsDone = true;\n      break;\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsError = action.error;\n      break;\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.imagePath = action.data\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      break;\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n  }\n});\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}