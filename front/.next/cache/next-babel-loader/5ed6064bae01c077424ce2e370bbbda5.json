{"ast":null,"code":"import shortId from 'shortid';\nimport produce from '../util/produce.js';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  uploadPostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'; // export const addPost = (data) => ({\n//   type: ADD_POST_REQUEST,\n//   data,\n// });\n// export const addComment = (data) => ({\n//   type: ADD_COMMENT_REQUEST,\n//   data,\n// });\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LIKE_POST_REQUEST:\n      draft.likePostsLoading = true;\n      draft.likePostsDone = false;\n      draft.likePostsError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostsLoading = false;\n        draft.likePostsDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostsLoading = false;\n      draft.likePostsError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostsLoading = true;\n      draft.unlikePostsDone = false;\n      draft.unlikePostsError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsDone = true;\n      break;\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.imagePath = action.data;\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        draft.mainPosts.Comments = post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/honest/Downloads/개발/7. react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","uploadPostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","addCommentLoading","addCommentDone","addCommentError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","reducer","state","action","draft","type","likePostsLoading","likePostsDone","likePostsError","post","find","v","id","data","PostId","Likers","push","UserId","error","unlikePostsLoading","unlikePostsDone","unlikePostsError","filter","concat","length","imagePath","unshift","removePostLoading","Comments"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\nimport produce from '../util/produce.js';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  uploadPostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\n// export const addPost = (data) => ({\n//   type: ADD_POST_REQUEST,\n//   data,\n// });\n\n// export const addComment = (data) => ({\n//   type: ADD_COMMENT_REQUEST,\n//   data,\n// });\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LIKE_POST_REQUEST:   \n      draft.likePostsLoading = true;\n      draft.likePostsDone = false;\n      draft.likePostsError = null;\n      break;\n    case LIKE_POST_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Likers.push( { id: action.data.UserId } );\n      draft.likePostsLoading = false;\n      draft.likePostsDone = true;\n      break;\n    }\n    case LIKE_POST_FAILURE:\n      draft.likePostsLoading = false;\n      draft.likePostsError = action.error;\n      break;\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostsLoading = true;\n      draft.unlikePostsDone = false;\n      draft.unlikePostsError = null;\n      break;\n    case UNLIKE_POST_SUCCESS:\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsDone = true;\n      break;\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsError = action.error;\n      break;\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.imagePath = action.data;\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      draft.mainPosts.Comments = post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      break;\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n  }\n});\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}