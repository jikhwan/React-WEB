{"ast":null,"code":"import { all, fork, call, take, put, delay, debounce, throttle, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction loginAPI() {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000); // const result = yield call(loginAPI, action.data)\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI)\n\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signup');\n}\n\nfunction* signUp() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI)\n\n    yield put({\n      type: SIGN_UP_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSingUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSingUp)]);\n}","map":{"version":3,"sources":["/Users/honest/Downloads/개발/7. react-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","call","take","put","delay","debounce","throttle","takeLatest","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginAPI","post","data","logIn","action","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSingUp","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,GAA/B,EAAoCC,KAApC,EAA2CC,QAA3C,EAAqDC,QAArD,EAA+DC,UAA/D,QAAgF,oBAAhF;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EACSC,eADT,EAC0BC,eAD1B,EAC2CC,eAD3C,EAESC,eAFT,EAE0BC,eAF1B,EAE2CC,eAF3C,QAEkE,kBAFlE;;AAIA,SAASC,QAAT,GAAoB;AAChB,SAAOV,KAAK,CAACW,IAAN,CAAW,YAAX,EAAyBC,IAAzB,CAAP;AACH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEb,cADA;AAENU,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMI,GAAN,EAAW;AACT,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEZ,cADA;AAENc,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaN;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASO,SAAT,GAAqB;AACjB,SAAOnB,KAAK,CAACW,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAI;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEV,eADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMW,GAAN,EAAW;AACT,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAET,eADA;AAENW,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaN;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,SAAT,GAAqB;AACjB,SAAOrB,KAAK,CAACW,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUW,MAAV,GAAmB;AACf,MAAI;AACA,UAAM1B,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEN,eADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMO,GAAN,EAAW;AACT,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAET,eADA;AAENW,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaN;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUW,UAAV,GAAsB;AAClB,QAAMxB,UAAU,CAACE,cAAD,EAAiBY,KAAjB,CAAhB;AACH;;AAED,UAAUW,WAAV,GAAuB;AACnB,QAAMzB,UAAU,CAACK,eAAD,EAAkBgB,MAAlB,CAAhB;AACH;;AAED,UAAUK,WAAV,GAAuB;AACnB,QAAM1B,UAAU,CAACS,eAAD,EAAkBc,MAAlB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMnC,GAAG,CAAC,CACNC,IAAI,CAAC+B,UAAD,CADE,EAEN/B,IAAI,CAACgC,WAAD,CAFE,EAGNhC,IAAI,CAACiC,WAAD,CAHE,CAAD,CAAT;AAMH","sourcesContent":["import {all, fork, call, take, put, delay, debounce, throttle, takeLatest} from 'redux-saga/effects'\nimport axios from 'axios'\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \n         LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, \n         SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user'\n\nfunction loginAPI() {\n    return axios.post('/api/login', data)\n}\n\nfunction* logIn(action) {\n    try {\n        yield delay(1000)\n        // const result = yield call(loginAPI, action.data)\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch(err) {\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.response.data,\n        })\n    }\n}\n\nfunction logOutAPI() {\n    return axios.post('/api/logout')\n}\n\nfunction* logOut() {\n    try {\n        yield delay(1000)\n        // const result = yield call(logOutAPI)\n        yield put({\n            type: LOG_OUT_SUCCESS,\n            // data: result.data,\n        });\n    } catch(err) {\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err.response.data,\n        })\n    }\n}\n\nfunction signUpAPI() {\n    return axios.post('/api/signup')\n}\n\nfunction* signUp() {\n    try {\n        yield delay(1000)\n        // const result = yield call(logOutAPI)\n        yield put({\n            type: SIGN_UP_SUCCESS,\n            // data: result.data,\n        });\n    } catch(err) {\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err.response.data,\n        })\n    }\n}\n\nfunction* watchLogIn(){\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut(){\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSingUp(){\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchSingUp),\n    ])\n\n}"]},"metadata":{},"sourceType":"module"}