{"ast":null,"code":"import shortId from 'shortid';\nimport produce from '../util/produce.js';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const LIKE_POST_REQUEST = 'LIKE_POSTS_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POSTS_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POSTS_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POSTS_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POSTS_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POSTS_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LIKE_POSTS_REQUEST:\n      draft.likePostsLoading = true;\n      draft.likePostsDone = false;\n      draft.likePostsError = null;\n      break;\n\n    case LIKE_POSTS_SUCCESS:\n      action.data;\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Likers.push({\n        id: action.data.UserId\n      });\n      draft.likePostsLoading = false;\n      draft.likePostsDone = true;\n      break;\n\n    case LIKE_POSTS_FAILURE:\n      draft.likePostsLoading = false;\n      draft.likePostsError = action.error;\n      break;\n\n    case UNLIKE_POSTS_REQUEST:\n      draft.unlikePostsLoading = true;\n      draft.unlikePostsDone = false;\n      draft.unlikePostsError = null;\n      break;\n\n    case UNLIKE_POSTS_SUCCESS:\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsDone = true;\n      break;\n\n    case UNLIKE_POSTS_FAILURE:\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/honest/Downloads/개발/7. react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","LIKE_POSTS_REQUEST","likePostsLoading","likePostsDone","likePostsError","LIKE_POSTS_SUCCESS","post","find","v","id","PostId","Likers","push","UserId","LIKE_POSTS_FAILURE","error","UNLIKE_POSTS_REQUEST","unlikePostsLoading","unlikePostsDone","unlikePostsError","UNLIKE_POSTS_SUCCESS","UNLIKE_POSTS_FAILURE","concat","length","unshift","filter","Comments"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE,EAFc;AAG1BC,EAAAA,YAAY,EAAE,IAHY;AAI1BC,EAAAA,gBAAgB,EAAE,KAJQ;AAK1BC,EAAAA,aAAa,EAAE,KALW;AAM1BC,EAAAA,cAAc,EAAE,IANU;AAO1BC,EAAAA,eAAe,EAAE,KAPS;AAQ1BC,EAAAA,YAAY,EAAE,KARY;AAS1BC,EAAAA,aAAa,EAAE,IATW;AAU1BC,EAAAA,iBAAiB,EAAE,KAVO;AAW1BC,EAAAA,cAAc,EAAE,KAXU;AAY1BC,EAAAA,eAAe,EAAE,IAZS;AAa1BC,EAAAA,cAAc,EAAE,KAbU;AAc1BC,EAAAA,WAAW,EAAE,KAda;AAe1BC,EAAAA,YAAY,EAAE,IAfY;AAgB1BC,EAAAA,iBAAiB,EAAE,KAhBO;AAiB1BC,EAAAA,cAAc,EAAE,KAjBU;AAkB1BC,EAAAA,eAAe,EAAE,IAlBS;AAmB1BC,EAAAA,iBAAiB,EAAE,KAnBO;AAoB1BC,EAAAA,cAAc,EAAE,KApBU;AAqB1BC,EAAAA,eAAe,EAAE;AArBS,CAArB;AAwBP,OAAO,MAAMC,iBAAiB,GAAG,oBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,oBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,oBAA1B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,sBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,sBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,sBAA5B;AAEP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAEX,gBAD0B;AAEhCU,EAAAA;AAFgC,CAAX,CAAhB;AAKP,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAEL,mBAD6B;AAEnCI,EAAAA;AAFmC,CAAX,CAAnB,C,CAKP;;AACA,MAAMG,OAAO,GAAG,CAACC,KAAK,GAAG7C,YAAT,EAAuB8C,MAAvB,KAAkC/C,OAAO,CAAC8C,KAAD,EAASE,KAAD,IAAW;AAC1E,UAAQD,MAAM,CAACJ,IAAf;AACE,SAAKM,kBAAL;AACED,MAAAA,KAAK,CAACE,gBAAN,GAAyB,IAAzB;AACAF,MAAAA,KAAK,CAACG,aAAN,GAAsB,KAAtB;AACAH,MAAAA,KAAK,CAACI,cAAN,GAAuB,IAAvB;AACA;;AACF,SAAKC,kBAAL;AACEN,MAAAA,MAAM,CAACL,IAAP;AACA,YAAMY,IAAI,GAAGN,KAAK,CAAC9C,SAAN,CAAgBqD,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACL,IAAP,CAAYgB,MAAjD,CAAb;AACAJ,MAAAA,IAAI,CAACK,MAAL,CAAYC,IAAZ,CAAkB;AAAEH,QAAAA,EAAE,EAAEV,MAAM,CAACL,IAAP,CAAYmB;AAAlB,OAAlB;AACAb,MAAAA,KAAK,CAACE,gBAAN,GAAyB,KAAzB;AACAF,MAAAA,KAAK,CAACG,aAAN,GAAsB,IAAtB;AACA;;AACF,SAAKW,kBAAL;AACEd,MAAAA,KAAK,CAACE,gBAAN,GAAyB,KAAzB;AACAF,MAAAA,KAAK,CAACI,cAAN,GAAuBL,MAAM,CAACgB,KAA9B;AACA;;AACF,SAAKC,oBAAL;AACEhB,MAAAA,KAAK,CAACiB,kBAAN,GAA2B,IAA3B;AACAjB,MAAAA,KAAK,CAACkB,eAAN,GAAwB,KAAxB;AACAlB,MAAAA,KAAK,CAACmB,gBAAN,GAAyB,IAAzB;AACA;;AACF,SAAKC,oBAAL;AACEpB,MAAAA,KAAK,CAACiB,kBAAN,GAA2B,KAA3B;AACAjB,MAAAA,KAAK,CAACkB,eAAN,GAAwB,IAAxB;AACA;;AACF,SAAKG,oBAAL;AACErB,MAAAA,KAAK,CAACiB,kBAAN,GAA2B,KAA3B;AACAjB,MAAAA,KAAK,CAACmB,gBAAN,GAAyBpB,MAAM,CAACgB,KAAhC;AACA;;AACF,SAAKlC,kBAAL;AACEmB,MAAAA,KAAK,CAAC3C,gBAAN,GAAyB,IAAzB;AACA2C,MAAAA,KAAK,CAAC1C,aAAN,GAAsB,KAAtB;AACA0C,MAAAA,KAAK,CAACzC,cAAN,GAAuB,IAAvB;AACA;;AACF,SAAKuB,kBAAL;AACEkB,MAAAA,KAAK,CAAC3C,gBAAN,GAAyB,KAAzB;AACA2C,MAAAA,KAAK,CAAC1C,aAAN,GAAsB,IAAtB;AACA0C,MAAAA,KAAK,CAAC9C,SAAN,GAAkB6C,MAAM,CAACL,IAAP,CAAY4B,MAAZ,CAAmBtB,KAAK,CAAC9C,SAAzB,CAAlB;AACA8C,MAAAA,KAAK,CAAC5C,YAAN,GAAqB4C,KAAK,CAAC9C,SAAN,CAAgBqE,MAAhB,GAAyB,EAA9C;AACA;;AACF,SAAKxC,kBAAL;AACEiB,MAAAA,KAAK,CAAC3C,gBAAN,GAAyB,KAAzB;AACA2C,MAAAA,KAAK,CAACzC,cAAN,GAAuBwC,MAAM,CAACgB,KAA9B;AACA;;AACF,SAAK/B,gBAAL;AACEgB,MAAAA,KAAK,CAAClC,cAAN,GAAuB,IAAvB;AACAkC,MAAAA,KAAK,CAACjC,WAAN,GAAoB,KAApB;AACAiC,MAAAA,KAAK,CAAChC,YAAN,GAAqB,IAArB;AACA;;AACF,SAAKiB,gBAAL;AACEe,MAAAA,KAAK,CAAClC,cAAN,GAAuB,KAAvB;AACAkC,MAAAA,KAAK,CAACjC,WAAN,GAAoB,IAApB;AACAiC,MAAAA,KAAK,CAAC9C,SAAN,CAAgBsE,OAAhB,CAAwBzB,MAAM,CAACL,IAA/B;AACA;;AACF,SAAKR,gBAAL;AACEc,MAAAA,KAAK,CAAClC,cAAN,GAAuB,KAAvB;AACAkC,MAAAA,KAAK,CAAChC,YAAN,GAAqB+B,MAAM,CAACgB,KAA5B;AACA;;AACF,SAAK5B,mBAAL;AACEa,MAAAA,KAAK,CAAC/B,iBAAN,GAA0B,IAA1B;AACA+B,MAAAA,KAAK,CAAC9B,cAAN,GAAuB,KAAvB;AACA8B,MAAAA,KAAK,CAAC7B,eAAN,GAAwB,IAAxB;AACA;;AACF,SAAKiB,mBAAL;AACEY,MAAAA,KAAK,CAAC/B,iBAAN,GAA0B,KAA1B;AACA+B,MAAAA,KAAK,CAAC9B,cAAN,GAAuB,IAAvB;AACA8B,MAAAA,KAAK,CAAC9C,SAAN,GAAkB8C,KAAK,CAAC9C,SAAN,CAAgBuE,MAAhB,CAAwBjB,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACL,IAA9C,CAAlB;AACA;;AACF,SAAKL,mBAAL;AACEW,MAAAA,KAAK,CAAC/B,iBAAN,GAA0B,KAA1B;AACA+B,MAAAA,KAAK,CAAC7B,eAAN,GAAwB4B,MAAM,CAACgB,KAA/B;AACA;;AACF,SAAKzB,mBAAL;AACEU,MAAAA,KAAK,CAAC5B,iBAAN,GAA0B,IAA1B;AACA4B,MAAAA,KAAK,CAAC3B,cAAN,GAAuB,KAAvB;AACA2B,MAAAA,KAAK,CAAC1B,eAAN,GAAwB,IAAxB;AACA;;AACF,SAAKiB,mBAAL;AAA0B;AACxB,cAAMe,IAAI,GAAGN,KAAK,CAAC9C,SAAN,CAAgBqD,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASV,MAAM,CAACL,IAAP,CAAYgB,MAAjD,CAAb;AACAJ,QAAAA,IAAI,CAACoB,QAAL,CAAcF,OAAd,CAAsBzB,MAAM,CAACL,IAA7B;AACAM,QAAAA,KAAK,CAAC5B,iBAAN,GAA0B,KAA1B;AACA4B,QAAAA,KAAK,CAAC3B,cAAN,GAAuB,IAAvB;AACA,cALwB,CAMxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,SAAKmB,mBAAL;AACEQ,MAAAA,KAAK,CAAC5B,iBAAN,GAA0B,KAA1B;AACA4B,MAAAA,KAAK,CAAC1B,eAAN,GAAwByB,MAAM,CAACgB,KAA/B;AACA;;AACF;AACE;AArGJ;AAuGD,CAxGwD,CAAzD;;AA0GA,eAAelB,OAAf","sourcesContent":["import shortId from 'shortid';\nimport produce from '../util/produce.js';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const LIKE_POST_REQUEST = 'LIKE_POSTS_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POSTS_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POSTS_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POSTS_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POSTS_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POSTS_FAILURE';\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\n  switch (action.type) {\n    case LIKE_POSTS_REQUEST:\n      draft.likePostsLoading = true;\n      draft.likePostsDone = false;\n      draft.likePostsError = null;\n      break;\n    case LIKE_POSTS_SUCCESS:\n      action.data;\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Likers.push( { id: action.data.UserId } )\n      draft.likePostsLoading = false;\n      draft.likePostsDone = true;\n      break;\n    case LIKE_POSTS_FAILURE:\n      draft.likePostsLoading = false;\n      draft.likePostsError = action.error;\n      break;\n    case UNLIKE_POSTS_REQUEST:\n      draft.unlikePostsLoading = true;\n      draft.unlikePostsDone = false;\n      draft.unlikePostsError = null;\n      break;\n    case UNLIKE_POSTS_SUCCESS:\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsDone = true;\n      break;\n    case UNLIKE_POSTS_FAILURE:\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsError = action.error;\n      break;\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS: {\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      break;\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n    }\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n  }\n});\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}