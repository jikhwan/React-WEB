{"ast":null,"code":"import { all, fork, call, take, put, delay, debounce, throttle, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data)\n\n    yield put({\n      type: 'ADD_POST_SUCCESS' // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/honest/Downloads/개발/7. react-nodebird/prepare/front/sagas/post.js"],"names":["all","fork","call","take","put","delay","debounce","throttle","takeLatest","axios","addPostAPI","data","post","addPost","action","type","err","error","response","watchAddPost","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,GAA/B,EAAoCC,KAApC,EAA2CC,QAA3C,EAAqDC,QAArD,EAA+DC,UAA/D,QAAgF,oBAAhF;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,kBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMC,GAAN,EAAW;AACT,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,kBADA;AAENE,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUQ,YAAV,GAAwB;AACpB,QAAMX,UAAU,CAAC,kBAAD,EAAqBK,OAArB,CAAhB;AACH;;AAED,eAAe,UAAUO,QAAV,GAAqB;AAChC,QAAMpB,GAAG,CAAC,CACNC,IAAI,CAACkB,YAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import {all, fork, call, take, put, delay, debounce, throttle, takeLatest} from 'redux-saga/effects'\nimport axios from 'axios'\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data)\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000)\n        // const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: 'ADD_POST_SUCCESS',\n            // data: result.data,\n        });\n    } catch(err) {\n        yield put({\n            type: 'ADD_POST_FAILURE',\n            error: err.response.data,\n        })\n    }\n}\n\nfunction* watchAddPost(){\n    yield takeLatest('ADD_POST_REQUEST', addPost)\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}